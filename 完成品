#include <iostream>
#include<ctime>
#include<string>
#include"Size.h"
#include"judgment.h"
using namespace std;

const int NUMBER_OF_CARDS = 52;

int main()
{
    cout << "玩家人數" << endl;
    int a,b,aaa;
    cin >> a;
    while (a < 2) {
        if (a <= 2) {
            cout << "重新輸入";
            cin >> a;
        }
    }
    while (a > 8) {
        if (a > 8) {
            cout << "重新輸入";
            cin >> a;
        }
    }
    string suits[] = { "Spades","Hearts","Clubs","Diamonds" };
    string numbers[] = { "Ace","2","3","4","5","6","7","8","9","10","Jack",
                 "Queen","King" };
    int cards[NUMBER_OF_CARDS];
    int n, n1;

    for (int i = 0; i < NUMBER_OF_CARDS; i++) cards[i] = i;


    //shuffing cards.
    srand(time(0));
    for (int i = 0; i < NUMBER_OF_CARDS; i++)
    {
        int swap_index = rand() % NUMBER_OF_CARDS;
        int t = cards[i];
        cards[i] = cards[swap_index];
        cards[swap_index] = t;
    }

    int player[19], sum = 0;
    sum = a * 2 + 3;
    n = 2;
    n1 = 0;

    for (int j = 0; j < a; j++) {
        cout << "玩家" << j + 1 << endl;
        for (n1; n1 < n; n1++) {
            player[n1] = cards[n1];
            int cs = cards[n1] / 13;  // card suit 0,1,2,3
            int cg = cards[n1] % 13;  // card number 0,1,2,3,....,12

            cout << "  " << suits[cs] << " " << numbers[cg] << endl;
        }
        n = n + 2;
    }
    //底牌
    aaa = a * 2;
    for (int i = 0; i < 3; i++) {
        player[aaa] = cards[aaa];
        aaa++;
    }
    //牌池
    for (n1; n1 < a*2+3; n1++) 
        player[n1] = cards[n1];
    //變數
    int player2[16] = {}, player3[8]; 
    //判斷遊戲是否繼續
    int o = 0, O = 0;
   
    cout << "按1繼續" << "按0棄牌" << endl;
    for (int i = 0; i < a; i++) 
    {
        cout << "玩家" << i + 1 << "輸入" << endl;
        cin >> b;
       
    if (b != 1 && b != 0)
        {
            while (b != 1 || b != 0) 
            {
                cout << "請重新輸入" << endl;
                cin >> b;
            }
        }
    else if (b == 1) 
        {        
        
        judement Player(i + 1, b);
        player2[o] = player[Player.getcard()];
        o++;
        player2[o] = player[Player.getcard()+1];
        o++;
        player3[O] = i+1;
        O++;
        }

    }
    if (O == 1) {
        cout << "贏家是   玩家" << player3[0];
        return 0;
    }
    else if (O == 0) {
        cout << "錯誤";
        return 0;
    }
    n = 2;
    n1 = 0;
    cout << "剩餘玩家:" << endl;
    for (int i = 0; i < o / 2; i++) {
        cout << "玩家" << player3[i]<<endl;
            for (n1; n1 < n; n1++) {
                int cs = player2[n1] / 13;  // card suit 0,1,2,3
                int cg = player2[n1] % 13;  // card number 0,1,2,3,....,12

                cout << "  " << suits[cs] << " " << numbers[cg] << endl;
            }
            n = n + 2;
    }
    cout << "底牌1" << endl;
    int cs = player[a*2] / 13;  // card suit 0,1,2,3
    int cg = player[a*2] % 13;  // card number 0,1,2,3,....,12
    cout << "  " << suits[cs] << " " << numbers[cg] << endl;
    //繼續判斷
    int o1 = 0, O1 = 0;
    
    cout << "按1繼續" << "按0棄牌" << endl;
    for (int i = 0; i < O; i++)
    {
        cout << "玩家" << i + 1 << "輸入" << endl;
        cin >> b;

        if (b != 1 && b != 0)
        {
            while (b != 1 || b != 0)
            {
                cout << "請重新輸入" << endl;
                cin >> b;
            }
        }
        else if (b == 1)
        {

            judement Player(i + 1, b);
            player2[o1] = player[Player.getcard()];
            o1++;
            player2[o1] = player[Player.getcard() + 1];
            o1++;
            player3[O1] = i + 1;
            O1++;
        }

    }
    if (O1 == 1) {
        cout << "贏家是   玩家" << player3[0];
        return 0;
    }
    else if (O1 == 0) {
        cout << "錯誤";
        return 0;
    }
    n = 2;
    n1 = 0;
    cout << "剩餘玩家:" << endl;
    for (int i = 0; i < o1 / 2; i++) {
        cout << "玩家" << player3[i] << endl;
        for (n1; n1 < n; n1++) {
            int cs = player2[n1] / 13;  // card suit 0,1,2,3
            int cg = player2[n1] % 13;  // card number 0,1,2,3,....,12

            cout << "  " << suits[cs] << " " << numbers[cg] << endl;
        }
        n = n + 2;
    }
    cout << "底牌2" << endl;
    int cs1 = player[a * 2+1] / 13;  // card suit 0,1,2,3
    int cg1 = player[a * 2+1] % 13;  // card number 0,1,2,3,....,12
    cout << "  " << suits[cs1] << " " << numbers[cg1] << endl;
    //最後一次判斷
    int o2 = 0, O2 = 0;
    
    cout << "按1繼續" << "按0棄牌" << endl;
    for (int i = 0; i < O; i++)
    {
        cout << "玩家" << i + 1 << "輸入" << endl;
        cin >> b;

        if (b != 1 && b != 0)
        {
            while (b != 1 || b != 0)
            {
                cout << "請重新輸入" << endl;
                cin >> b;
            }
        }
        else if (b == 1)
        {

            judement Player(i + 1, b);
            player2[o2] = player[Player.getcard()];
            o2++;
            player2[o2] = player[Player.getcard() + 1];
            o2++;
            player3[O2] = i + 1;
            O2++;
        }

    }
    if (O2 == 1) {
        cout << "贏家是   玩家" << player3[0];
        return 0;
    }
    else if (O2 == 0) {
        cout << "錯誤"; 
            return 0;
    }
    n = 2;
    n1 = 0;
    cout << "剩餘玩家:" << endl;
    for (int i = 0; i < o2 / 2; i++) {
        cout << "玩家" << player3[i] << endl;
        for (n1; n1 < n; n1++) {
            int cs = player2[n1] / 13;  // card suit 0,1,2,3
            int cg = player2[n1] % 13;  // card number 0,1,2,3,....,12

            cout << "  " << suits[cs] << " " << numbers[cg] << endl;
        }
        n = n + 2;
    }
    cout << "底牌3" << endl;
    int cs2 = player[a * 2 + 2] / 13;  // card suit 0,1,2,3
    int cg2 = player[a * 2 + 2] % 13;  // card number 0,1,2,3,....,12
    cout << "  " << suits[cs2] << " " << numbers[cg2] << endl;
    //最後
    int o3 = 0, O3 = 0;
    
    cout << "按1繼續" << "按0棄牌" << endl;
    for (int i = 0; i < O; i++)
    {
        cout << "玩家" << i + 1 << "輸入" << endl;
        cin >> b;

        if (b != 1 && b != 0)
        {
            while (b != 1 || b != 0)
            {
                cout << "請重新輸入" << endl;
                cin >> b;
            }
        }
        else if (b == 1)
        {

            judement Player(i + 1, b);
            player2[o3] = player[Player.getcard()];
            o3++;
            player2[o3] = player[Player.getcard() + 1];
            o3++;
            player3[O3] = i + 1;
            O3++;
        }

    }
    if (O3 == 1) {
        cout << "贏家是   玩家" << player3[0];
        return 0;
    }
    else if (O3 == 0) {
        cout << "錯誤";
        return 0;
    }
    n = 2;
    n1 = 0;
    cout << "剩餘玩家:" << endl;
    for (int i = 0; i < o2 / 2; i++) {
        cout << "玩家" << player3[i] << endl;
        for (n1; n1 < n; n1++) {
            int cs = player2[n1] / 13;  // card suit 0,1,2,3
            int cg = player2[n1] % 13;  // card number 0,1,2,3,....,12

            cout << "  " << suits[cs] << " " << numbers[cg] << endl;
        }
        n = n + 2;
    }
    Size sizelist[8];
    int max=0,playernumber=0;
    for (int i = 0; i < o3 / 2; i++) {
        sizelist[i].setc1(player2[n1]);
        sizelist[i].setc2(player2[n1 + 1]);
        sizelist[i].setc3(player[a*2]);
        sizelist[i].setc4(player[a * 2 + 1]);
        sizelist[i].setc5(player[a * 2 + 2]);
        sizelist[i].setsize();
        if (sizelist[i].getsize() > max) {
            max = sizelist[i].getsize();
            playernumber = i;
        }
    }
    int max2=1, pcard;
    n = 2;
    n1 = 0;
    if (max == 1) {
        for (int i = 0; i < o3 / 2; i++) 
        {
            for (n1; n1 < n; n1++) {
                pcard = player2[n1] % 13;
                if (pcard > max) {
                    max = pcard;
                    playernumber = i;
                }
            } 
            n = n + 2;
        }
       
    }

    cout << "贏家" << player3[playernumber]<<endl;
    
    cout << "制作by陳泓圳";
    system("pause");
    return 0;

}
#include"judgment.h"
judement::judement() {
	playerturn = 0;
	number = 0;
}
judement::judement(int P, int N) {
	playerturn = P;
	number = N;
}
int judement::getplayerturn() {
	return playerturn;
}
int judement::getnumber() {
	return number;
}
int judement::getcard() {
	return playerturn * 2 - 2;
}
#include"Size.h"
Size::Size() {
	c1 = 0;
	c2 = 0;
	c3 = 0;
	c4 = 0;
	c5 = 0;
	a = 0;
}
Size::Size(int C1, int C2, int C3, int C4, int C5) {
	c1 = C1;
	c2 = C2;
	c3 = C3;
	c4 = C4;
	c5 = C5;
}
void Size::setc1(int C1) {
	c1 = C1;
}
void Size::setc2(int C2) {
	c2 = C2;
}
void Size::setc3(int C3){
	c3 = C3;
}
void Size::setc4(int C4) {
	c4 = C4;
}
void Size::setc5(int C5) {
	c5= C5;
}
void Size::setsize() {
	int sizelist[5] = { c1 % 13,c2 % 13,c3 % 13,c4 % 13,c5 % 13 }, a;
	sort(sizelist, sizelist + 5);
	if (c1 / 13 == c2 / 13 == c3 / 13 == c4 / 13 == c5 / 13 && sizelist[0] + 12 == sizelist[4] && sizelist[1] + 3 == sizelist[4] && sizelist[2] + 2 == sizelist[4]
		&& sizelist[3] + 1 == sizelist[4])
		a = 11;
	else if (c1 / 13 == c2 / 13 == c3 / 13 == c4 / 13 == c5 / 13 && sizelist[0] + 4 == sizelist[4] && sizelist[1] + 3 == sizelist[4] && sizelist[2] + 2 == sizelist[4]
		&& sizelist[3] + 1 == sizelist[4])
		a = 10;

	else if (sizelist[0] == sizelist[1] == sizelist[2] == sizelist[3] || sizelist[1] == sizelist[2] == sizelist[3] == sizelist[4])
		a = 9;

	else if (c1 / 13 == c2 / 13 == c3 / 13 == c4 / 13 == c5 / 13)
		a = 8;
	else if (sizelist[0] == sizelist[1] == sizelist[2] && sizelist[3] == sizelist[4] || sizelist[2] == sizelist[3] == sizelist[4] && sizelist[0] == sizelist[1])
		a = 7;
	else if (sizelist[0] + 4 == sizelist[4] && sizelist[1] + 3 == sizelist[4] && sizelist[2] + 2 == sizelist[4]
		&& sizelist[3] + 1 == sizelist[4])
		a = 6;
	else if (sizelist[0] + 12 == sizelist[4] && sizelist[1] + 3 == sizelist[4] && sizelist[2] + 2 == sizelist[4]
		&& sizelist[3] + 1 == sizelist[4])
		a = 5;
	else if (sizelist[0] == sizelist[1] == sizelist[2] || sizelist[1] == sizelist[2] == sizelist[3] || sizelist[2] == sizelist[3] == sizelist[4])
		a = 4;

	else if (sizelist[0] == sizelist[1] && sizelist[2] == sizelist[3] || sizelist[1] == sizelist[2] && sizelist[3] == sizelist[4] || sizelist[0] == sizelist[1] && sizelist[3] == sizelist[4])
		a = 3;

	else if (sizelist[0] == sizelist[1] || sizelist[1] == sizelist[2] || sizelist[2] == sizelist[3] || sizelist[3] == sizelist[4])
		a = 2;
	else
		a = 1;
}
int Size::getsize() {
	return a;
}
class judement {
public:
	judement();
	judement(int, int);
	int getplayerturn();
	int getnumber();
	int getcard();
private:
	int playerturn, number;
};
#include<iostream>
#include<algorithm>
using namespace std;
class Size {
public:
	Size();
	Size(int, int, int, int, int);
	void setc1(int);
	void setc2(int);
	void setc3(int);
	void setc4(int);
	void setc5(int);
	void setsize();
	int getsize();
private:
	int c1, c2, c3, c4, c5,a;
};
